version: '3'
services:
  ed-pyspark-jupyter:
    image: jupyter/pyspark-notebook:spark-3.3.0
    user: root
    container_name: ed-pyspark-jupyter-lab
    ports:
      - 8888:8888
      - 4040:4040
    environment:
      JUPYTER_PORT: 8888
      SPARK_UI_PORT: 4040
      GRANT_SUDO: yes

  # spark-master:
  #   image: bitnami/spark:latest
  #   command: bin/spark-class org.apache.spark.deploy.master.Master
  #   ports:
  #     - "9090:8080"
  #     - "7077:7077"

  # spark-worker:
  #   image: bitnami/spark:latest
  #   command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
  #   depends_on:
  #     - spark-master
  #   environment:
  #     SPARK_MODE: worker
  #     SPARK_WORKER_CORES: 2
  #     SPARK_WORKER_MEMORY: 1g
  #     SPARK_MASTER_URL: spark://spark-master:7077

  ed-zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: ed-zookeeper
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

    restart: on-failure

  ed-kafka:
    image: confluentinc/cp-kafka:latest
    container_name: ed-kafka
    depends_on:
      - ed-zookeeper
    ports:
      - 9092:9092

    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: ed-zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://ed-kafka:29092,PLAINTEXT_HOST://127.0.0.1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "raw:1:1"

    restart: on-failure
    # networks:
    #   - kafka-net
  
  kafka-topics:
    image: python:3.7  # Usa una imagen de Python
    container_name: kafka-create-topics
    volumes:
      - ./kafka_installation/create_topics.py:/app/create_topics.py  # Monta el archivo producer.py
    working_dir: /app  # Directorio de trabajo dentro del contenedor
    command: >
      /bin/bash -c "
      apt-get update && 
      apt-get install -y python3-pip && 
      pip3 install kafka-python &&
      python3 create_topics.py"
    depends_on:
      - ed-kafka
  
  django-app:
    build:
      context: .  # Ruta al directorio con el Dockerfile de tu aplicación
      dockerfile: Dockerfile  # Nombre del Dockerfile si es diferente
    volumes:
      - .:/cnvte_webpage
    ports:
      - "8080:8080"
    image: django-app:cnvte_webpage
    container_name: django_container
    command: python manage.py runserver 0.0.0.0:8080
    environment:
      - DEBUG=1  # Habilita el modo de depuración si estás en desarrollo
      - DJANGO_SETTINGS_MODULE=cnvte_webpage.settings
    depends_on:
      - kafka-topics
    # networks:
    #   - kafka-net
    
  cassandra_db:
    image: cassandra:latest
    container_name: cassandra
    hostname: cassandra
    ports:
      - "9042:9042"
    environment:
      - MAX_HEAP_SIZE=512M
      - HEAP_NEWSIZE=100M
      - CASSANDRA_USERNAME=cassandra
      - CASSANDRA_PASSWORD=cassandra

networks:
  kafka-net: