version: '3'
services:
  # ed-pyspark-jupyter:
  #   image: jupyter/pyspark-notebook:spark-3.3.0
  #   user: root
  #   container_name: ed-pyspark-jupyter-lab
  #   ports:
  #     - 8888:8888
  #     - 4040:4040
  #   environment:
  #     JUPYTER_PORT: 8888
  #     SPARK_UI_PORT: 4040
  #     GRANT_SUDO: yes

  spark-master:
    image: bitnami/spark:3.3.0
    command: bin/spark-class org.apache.spark.deploy.master.Master
    ports:
      - "9090:8080"
      - "7077:7077"
    depends_on:
      kafka-topics:
        condition: service_completed_successfully


  spark-worker:
    image: bitnami/spark:3.3.0
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_WORKER_CORES: 2
      SPARK_WORKER_MEMORY: 1g
      SPARK_MASTER_URL: spark://spark-master:7077

  ed-zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: ed-zookeeper
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

    restart: on-failure

  ed-kafka:
    image: confluentinc/cp-kafka:latest
    container_name: ed-kafka
    depends_on:
      - ed-zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: ed-zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://ed-kafka:29092,PLAINTEXT_HOST://127.0.0.1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "raw:1:1"
    restart: on-failure
    # networks:
    #   - kafka-net
  
  kafka-topics:
    build: 
      context: .
      dockerfile: Dockerfile.kafka_topics  # Asegúrate de que este Dockerfile esté en el mismo directorio
    container_name: kafka-create-topics
    restart: on-failure
    command: >
      /bin/bash -c "
      python3 create_topics.py"
    depends_on:
      - ed-kafka
  
  django-app:
    build:
      context: .  # Ruta al directorio con el Dockerfile de tu aplicación
      dockerfile: Dockerfile  # Nombre del Dockerfile si es diferente
    restart: on-failure
    volumes:
      - .:/cnvte_webpage
    ports:
      - "8080:8080"
    image: django-app:cnvte_webpage
    container_name: django_container
    command: python manage.py runserver 0.0.0.0:8080
    environment:
      - DEBUG=1  # Habilita el modo de depuración si estás en desarrollo
      - DJANGO_SETTINGS_MODULE=cnvte_webpage.settings
      - GOOGLE_APPLICATION_CREDENTIALS=./usuarios-cnvte-firebase-adminsdk-2izgz-338c2bdd79.json
    depends_on:
      - redis #kafka-topics
    # networks:
    #   - kafka-net

  pyspark-app:
    image: bitnami/spark:3.3.0
    container_name: pyspark-app
    command: bin/spark-submit --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.3.0,com.datastax.spark:spark-cassandra-connector_2.12:3.3.0 --master spark://spark-master:7077 /app/spark.py
    restart: on-failure
    volumes:
      - ./kafka_installation/spark.py:/app/spark.py
    depends_on:
      - spark-master
    
  #   # depends_on:
  #   #   kafka-topics:
  #   #     condition: service_completed_successfully
    
  cassandra_db:
    image: cassandra:latest
    container_name: cassandra
    hostname: cassandra
    ports:
      - "9042:9042"
    environment:
      - MAX_HEAP_SIZE=512M
      - HEAP_NEWSIZE=100M
      - CASSANDRA_USERNAME=cassandra
      - CASSANDRA_PASSWORD=cassandra

  redis:
    image: redis:latest
    container_name: redis
    restart: unless-stopped  # Opción para reiniciar Redis si falla o se detiene
    ports:
      - "6379:6379"

  worker_channels:
    build: .
    command: python manage.py runworker datos_vehiculo
    volumes:
      - .:/cnvte_webpage

  channels:
    build: .
    command: daphne -b 0.0.0.0 -p 8001 cnvte_webpage.asgi:application
    environment:
      - DJANGO_SETTINGS_MODULE=cnvte_webpage.settings
    volumes:
      - .:/cnvte_webpage
    ports:
      - "8001:8001"
    depends_on:
      - django-app

networks:
  kafka-net: